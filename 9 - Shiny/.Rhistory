tags$br(), # <- Ganti Baris
)
# Bikin fungsionalitas
server = function(input, output) {
output$table_iris = renderTable(
head(iris %>% filter(Species == input$species)),
width = "100%",
striped = TRUE # <- Ngasih garis-garis
)
output$hasil_klasifikasi = renderText({
# Buat dataframe berdasarkan input
input_prediksi = data.frame(
Sepal.Length = input$sl,
Sepal.Width = input$sw,
Petal.Length = input$pl,
Petal.Width = input$pw
)
# Prediksi kelas
hasil_kelas = predict(object = hasil_model, newdata = input_prediksi, type= "class")
# Prediksi probabilitas
hasil_prob = predict(object = hasil_model, newdata = input_prediksi, type= "prob")
hasil_prob = hasil_prob[hasil_kelas] * 100
paste(kelas[hasil_kelas], hasil_prob, sep = ", ")
}) |> bindEvent(input$cek_klasifikasi)
}
shinyApp(ui, server)
# Buat aplikasinya
library(shiny)
library(bslib)
library(bsicons) # <- Buat icon
# Bikin UI
ui = page_fluid(
titlePanel("Dataset Iris"),
layout_columns(
value_box(
"Jumlah Setosa",
nrow(iris %>% filter(Species == "setosa")),
theme = "bg-primary-subtle"
),
value_box(
"Jumlah Versicolor",
nrow(iris %>% filter(Species == "versicolor")),
theme = "bg-success-subtle"
),
value_box(
"Jumlah Virginica",
nrow(iris %>% filter(Species == "virginica")),
theme = "bg-danger-subtle"
),
),
selectInput(
"species",
"Pilih Jenis Spesies:",
levels(iris$Species)
),
tableOutput("table_iris"),
tags$br(), # <- Ganti Baris
titlePanel("Data Splitting"),
layout_columns(
value_box(
"Data Training",
nrow(iris_train),
showcase = bsicons::bs_icon("list-task"),
theme = "text-primary"
),
value_box(
"Data Testing",
nrow(iris_test),
showcase = bsicons::bs_icon("list-check"),
theme = "text-success"
),
),
tags$br(), # <- Ganti Baris
titlePanel("Metrik Evaluasi"),
value_box("Akurasi", akurasi, theme = "text-success"),
tags$br(), # <- Ganti Baris
titlePanel("Uji Coba"),
layout_columns(
numericInput( "sl", "Sepal Length", value = 1),
numericInput( "sw", "Sepal Width", value = 1),
numericInput("pl", "Petal Length", value = 1),
numericInput("pw", "Petal Width", value = 1),
),
actionButton("cek_klasifikasi", "Klasifikasi Spesies"),
tags$br(), # <- Ganti Baris
tags$br(), # <- Ganti Baris
textOutput("hasil_klasifikasi"),
tags$br(), # <- Ganti Baris
)
# Bikin fungsionalitas
server = function(input, output) {
output$table_iris = renderTable(
head(iris %>% filter(Species == input$species)),
width = "100%",
striped = TRUE # <- Ngasih garis-garis
)
output$hasil_klasifikasi = renderText({
# Buat dataframe berdasarkan input
input_prediksi = data.frame(
Sepal.Length = input$sl,
Sepal.Width = input$sw,
Petal.Length = input$pl,
Petal.Width = input$pw
)
# Prediksi kelas
hasil_kelas = predict(object = hasil_model, newdata = input_prediksi, type= "class")
# Prediksi probabilitas
hasil_prob = predict(object = hasil_model, newdata = input_prediksi, type= "prob")
hasil_prob = hasil_prob[hasil_kelas] * 100
paste(kelas[hasil_kelas], hasil_prob, sep = ", ")
}) |> bindEvent(input$cek_klasifikasi)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
ggplot(
salary_data,
aes(years, salary)
) + geom_point()
ggplot(
salary_data,
aes(years, salary)
) + geom_point()
library(tidyverse)
library(tidymodels)
# Mengganti nama kolom biar lebih ngodingnya
salary_data = salary_data %>% rename(
"id" = "X",
"years" = "YearsExperience",
"salary" = "Salary"
)
salary_data = read.csv("salary.csv")
# Mengganti nama kolom biar lebih ngodingnya
salary_data = salary_data %>% rename(
"id" = "X",
"years" = "YearsExperience",
"salary" = "Salary"
)
ggplot(
salary_data,
aes(years, salary)
) + geom_point()
set.seed(421)
split = initial_split(salary_data, prop = 0.8, strata = salary)
salary_train = split %>% training()
salary_test = split %>% testing()
model_linear = lm(
salary ~ years,
data = salary_train
)
summary(model_linear)
ggplot(
salary_train,
aes(years, salary)
) + geom_point() + stat_smooth(
method = "lm",
formula = y ~ x,
geom = "smooth"
)
hasil_prediksi = as_tibble(
predict(
model_linear,
salary_test
)
)
# Membandingkan hasil yang asli dengan hasil prediksi
salary_test = salary_test %>% mutate(hasil_prediksi)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
loan_data = read.csv("loan.csv")
# Menghilangkan data N/A
loan_data = na.omit(loan_data)
# Menghilangkan data kosong
loan_data = loan_data %>% filter(
Gender != "",
Married != "",
Dependents != "",
Self_Employed != "",
)
# Menghilangkan kolom Loan_ID
loan_data = loan_data %>% select(-Loan_ID)
# Mengubah kolom loan_status menjadi bernilai 1 atau 0
loan_data = loan_data %>% mutate(Loan_Status = ifelse(Loan_Status == "Y", 1, 0))
set.seed(127)
split = initial_split(loan_data, prop = 0.8, strata = Loan_Status)
loan_train = split %>% training()
loan_test = split %>% testing()
# Membuat model regresi logistik
model_logistic <- glm(
Loan_Status ~ .,
data = loan_train, family = "binomial"
)
# Menampilkan ringkasan model
summary(model_logistic)
hasil_klasifikasi = as_tibble(
predict(
model_logistic,
loan_test,
type = "response"
)
)
hasil_klasifikasi$value = ifelse(hasil_klasifikasi$value >= 0.5, 1, 0)
loan_test %>% mutate(hasil_klasifikasi)
knitr::opts_chunk$set(echo = TRUE)
salary_dataset = read.csv("salary.csv")
View(salary_dataset)
salary_dataset = salary_dataset %>% select(-X)
salary_dataset = salary_dataset %>% select(-X)
library(tidyverse)
library(tidyverse)
salary_dataset = salary_dataset %>% select(-X)
set.seed(24)
split = initial_split(salary_dataset, prop = 0.8, strata = Salary)
salary_train = split %>% training()
salary_test = split %>% testing()
hasil_model = lm(
Salary ~ YearsExperience,
data = salary_train
)
hasil_model = lm(
Salary ~ YearsExperience,
data = salary_train
)
summary(hasil_model)
predict(hasil_model, salary_test)
View(salary_test)
salary_test %>% mutate(hasil = hasil_prediksi)
hasil_prediksi = predict(hasil_model, salary_test)
salary_test %>% mutate(hasil = hasil_prediksi)
data(gapminder)
library(dslabs)
data(gapminder)
data(gapminder)
head(gapminder)
View(gapminder)
gapminder$infant_mortality[is.na(gapminder$infant_mortality)] = mean(gapminder$infant_mortality, na.rm=TRUE)
gapminder$life_expectancy[is.na(gapminder$life_expectancy)] = mean(gapminder$life_expectancy, na.rm=TRUE)
gapminder$fertility[is.na(gapminder$fertility)] = mean(gapminder$fertility, na.rm=TRUE)
gapminder$gdp[is.na(gapminder$gdp)] = mean(gapminder$gdp, na.rm=TRUE)
View(gapminder)
gapminder_2004 = gapminder %>%
filter(year == 2004) %>%
select(-year,-continent,-region)
gapminder_2004 = gapminder %>%
filter(year == 2004) %>%
select(-year,-continent,-region)
head(gapminder_2004)
gapminder_2004_scaled = gapminder_2004 %>%
select(-country) %>%
scale()
head(gapminder_2004_scaled)
set.seed(42)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 3,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result)
set.seed(42)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 3,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
head(gapminder_2004)
View(gapminder_2004)
wss = sapply(1:10, function(k){
set.seed(42)
kmeans(
gapminder_2004_scaled,
center = k,
nstart = 25
)$tot.withinss
})
elbow_data = data.frame(
k = 1:10,
wss = wss
)
ggplot(
data = elbow_data,
aes(
x = k,
y = wss
)
) + geom_line(
color = "blue"
) + geom_point(
color = "red"
)
wss = sapply(1:10, function(k){
set.seed(123)
kmeans(
gapminder_2004_scaled,
center = k,
nstart = 25
)$tot.withinss
})
elbow_data = data.frame(
k = 1:10,
wss = wss
)
ggplot(
data = elbow_data,
aes(
x = k,
y = wss
)
) + geom_line(
color = "blue"
) + geom_point(
color = "red"
)
set.seed(123)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 3,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
head(gapminder_2004)
set.seed(123)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 4,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
head(gapminder_2004)
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point()
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point() + scale_x_log10()
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point()
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point() + scale_x_log10()
set.seed(123)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 5,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
head(gapminder_2004)
ggplot(
gapminder_2004,
aes(
x = gdp,
y = life_expectancy,
color = cluster
)
) + geom_point() + scale_x_log10()
set.seed(123)
kmeans_result = kmeans(
gapminder_2004_scaled,
center = 4,
nstart = 25
)
gapminder_2004$cluster = as.factor(kmeans_result$cluster)
head(gapminder_2004)
library(tidyverse)
library(tidymodels) # <- Buat data splitting
library(nnet) # <- Buat model multinomial logistic regression
data(iris)
View(iris)
# Inisiasi kelas
kelas = levels(iris$Species)
set.seed(420)
split = initial_split(iris, prop = 0.8, strata = Species)
iris_train = split %>% training()
iris_test = split %>% testing()
formula = "Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width"
hasil_model = multinom(formula, data = iris_train)
summary(hasil_model)
# Type = "probs" kalo mau outputnya berupa probabilitas
hasil_prediksi_prob = predict(object = hasil_model, newdata = iris_test, type = "probs")
hasil_prediksi_prob = round(hasil_prediksi_prob, digits = 2)
hasil_prediksi_prob
# Type = "class" kalo mau outputnya berupa kelas
hasil_prediksi = predict(object = hasil_model, newdata = iris_test, type= "class")
hasil_prediksi
table(
Predicted = hasil_prediksi,
True = iris_test$Species
)
akurasi = paste0(round(((10 + 8 + 10) / 30) * 100, digit = 2), "%")
akurasi
# Buat aplikasinya
library(shiny)
library(bslib)
library(bsicons) # <- Buat icon
# Bikin UI
ui = page_fluid(
titlePanel("Dataset Iris"),
layout_columns(
value_box(
"Jumlah Setosa",
nrow(iris %>% filter(Species == "setosa")),
theme = "bg-primary-subtle"
),
value_box(
"Jumlah Versicolor",
nrow(iris %>% filter(Species == "versicolor")),
theme = "bg-success-subtle"
),
value_box(
"Jumlah Virginica",
nrow(iris %>% filter(Species == "virginica")),
theme = "bg-danger-subtle"
),
),
selectInput(
"species",
"Pilih Jenis Spesies:",
levels(iris$Species)
),
tableOutput("table_iris"),
tags$br(), # <- Ganti Baris
titlePanel("Data Splitting"),
layout_columns(
value_box(
"Data Training",
nrow(iris_train),
showcase = bsicons::bs_icon("list-task"),
theme = "text-primary"
),
value_box(
"Data Testing",
nrow(iris_test),
showcase = bsicons::bs_icon("list-check"),
theme = "text-success"
),
),
tags$br(), # <- Ganti Baris
titlePanel("Metrik Evaluasi"),
value_box("Akurasi", akurasi, theme = "text-success"),
tags$br(), # <- Ganti Baris
titlePanel("Uji Coba"),
layout_columns(
numericInput( "sl", "Sepal Length", value = 1),
numericInput( "sw", "Sepal Width", value = 1),
numericInput("pl", "Petal Length", value = 1),
numericInput("pw", "Petal Width", value = 1),
),
actionButton("cek_klasifikasi", "Klasifikasi Spesies"),
tags$br(), # <- Ganti Baris
tags$br(), # <- Ganti Baris
textOutput("hasil_klasifikasi"),
tags$br(), # <- Ganti Baris
)
# Bikin fungsionalitas
server = function(input, output) {
output$table_iris = renderTable(
head(iris %>% filter(Species == input$species)),
width = "100%",
striped = TRUE # <- Ngasih garis-garis
)
output$hasil_klasifikasi = renderText({
# Buat dataframe berdasarkan input
input_prediksi = data.frame(
Sepal.Length = input$sl,
Sepal.Width = input$sw,
Petal.Length = input$pl,
Petal.Width = input$pw
)
# Prediksi kelas
hasil_kelas = predict(object = hasil_model, newdata = input_prediksi, type= "class")
# Prediksi probabilitas
hasil_prob = predict(object = hasil_model, newdata = input_prediksi, type= "prob")
hasil_prob = hasil_prob[hasil_kelas] * 100
paste(kelas[hasil_kelas], hasil_prob, sep = ", ")
}) |> bindEvent(input$cek_klasifikasi)
}
shinyApp(ui, server)
